use std::{marker::PhantomData, mem};

use dendro_ast::{ast::*, token, token_stream::*};
use dendro_span::{span::*, symbol::*, ident::*};

use crate::imp::*;

grammar<'diag, 'a>(
    diag: &'diag DiagCx,
    cx: &'a mut ParseCx,
);

extern {
    type Location = Pos;
    type Error = dendro_error::DiagnosticBuilder<'diag>;

    enum SpacedToken<'diag> {
        "(" => (_, T(token::OpenDelim(token::Parenthesis)), _),
        ")" => (_, T(token::CloseDelim(token::Parenthesis)), _),
        "`[" => (Spacing::Joint, T(token::OpenDelim(token::Bracket)), _),
        "[" => (Spacing::Alone, T(token::OpenDelim(token::Bracket)), _),
        "]" => (_, T(token::CloseDelim(token::Bracket)), _),
        "{" => (_, T(token::OpenDelim(token::Brace)), _),
        "}" => (_, T(token::CloseDelim(token::Brace)), _),

        "=" => (_, T(token::Eq), _),
        "<" => (_, T(token::Lt), _),
        "<=" => (_, T(token::Le), _),
        "==" => (_, T(token::EqEq), _),
        "!=" => (_, T(token::Ne), _),
        ">=" => (_, T(token::Ge), _),
        ">" => (_, T(token::Gt), _),
        "&&" => (_, T(token::AndAnd), _),
        "||" => (_, T(token::OrOr), _),
        "!" => (_, T(token::Not), _),
        "~" => (_, T(token::Tilde), _),
        "`" => (_, T(token::BackQuote), _),
        "\\" => (_, T(token::BackSlash), _),

        "+" => (_, T(token::BinOp(token::Plus)), _),
        "-" => (_, T(token::BinOp(token::Minus)), _),
        "*" => (_, T(token::BinOp(token::Star)), _),
        "/" => (_, T(token::BinOp(token::Slash)), _),
        "%" => (_, T(token::BinOp(token::Percent)), _),
        "^" => (_, T(token::BinOp(token::Caret)), _),
        "&" => (_, T(token::BinOp(token::And)), _),
        "|" => (_, T(token::BinOp(token::Or)), _),
        "<<" => (_, T(token::BinOp(token::Shl)), _),
        ">>" => (_, T(token::BinOp(token::Shr)), _),

        "+=" => (_, T(token::BinOpEq(token::Plus)), _),
        "-=" => (_, T(token::BinOpEq(token::Minus)), _),
        "*=" => (_, T(token::BinOpEq(token::Star)), _),
        "/=" => (_, T(token::BinOpEq(token::Slash)), _),
        "%=" => (_, T(token::BinOpEq(token::Percent)), _),
        "^=" => (_, T(token::BinOpEq(token::Caret)), _),
        "&=" => (_, T(token::BinOpEq(token::And)), _),
        "|=" => (_, T(token::BinOpEq(token::Or)), _),
        "<<=" => (_, T(token::BinOpEq(token::Shl)), _),
        ">>=" => (_, T(token::BinOpEq(token::Shr)), _),

        "@" => (_, T(token::At), _),
        "." => (_, T(token::Dot), _),
        ".." => (Spacing::Alone, T(token::DotDot), Spacing::Alone),
        "`.." => (Spacing::Joint, T(token::DotDot), Spacing::Alone),
        "..`" => (Spacing::Alone, T(token::DotDot), Spacing::Joint),
        "`..`" => (Spacing::Joint, T(token::DotDot), Spacing::Joint),
        "..=" => (Spacing::Alone, T(token::DotDotEq), _),
        "`..=" => (Spacing::Joint, T(token::DotDotEq), _),
        "," => (_, T(token::Comma), _),
        ";" => (_, T(token::Semi), _),
        ":" => (_, T(token::Colon), _),
        "::" => (_, T(token::ColonColon), _),
        ":=" => (_, T(token::ColonEq), _),
        "->" => (_, T(token::RArrow), _),
        "<-" => (_, T(token::LArrow), _),
        "=>" => (_, T(token::FatArrow), _),
        "#" => (_, T(token::Pound), _),
        "$" => (_, T(token::Dollar), _),
        "?" => (_, T(token::Question), _),
        "'" => (_, T(token::SingleQuote), _),

        "_" => (_, T(token::Ident(kw::UNDERSCORE, false)), _),
        "KW:forall" => (_, T(token::Ident(kw::FORALL, false)), _),
        "KW:exists" => (_, T(token::Ident(kw::EXISTS, false)), _),
        "KW:where" => (_, T(token::Ident(kw::WHERE, false)), _),
        "KW:let" => (_, T(token::Ident(kw::LET, false)), _),
        "KW:pub" => (_, T(token::Ident(kw::PUB, false)), _),
        "KW:static" => (_, T(token::Ident(kw::STATIC, false)), _),
        "KW:default" => (_, T(token::Ident(kw::DEFAULT, false)), _),
        "KW:const" => (_, T(token::Ident(kw::CONST, false)), _),
        "KW:mut" => (_, T(token::Ident(kw::MUT, false)), _),
        "KW:move" => (_, T(token::Ident(kw::MOVE, false)), _),
        "KW:return" => (_, T(token::Ident(kw::RETURN, false)), _),
        "KW:in" => (_, T(token::Ident(kw::IN, false)), _),
        "KW:if" => (_, T(token::Ident(kw::IF, false)), _),
        "KW:else" => (_, T(token::Ident(kw::ELSE, false)), _),
        "KW:loop" => (_, T(token::Ident(kw::LOOP, false)), _),
        "KW:while" => (_, T(token::Ident(kw::WHILE, false)), _),
        "KW:break" => (_, T(token::Ident(kw::BREAK, false)), _),
        "KW:continue" => (_, T(token::Ident(kw::CONTINUE, false)), _),
        "KW:for" => (_, T(token::Ident(kw::FOR, false)), _),
        "KW:match" => (_, T(token::Ident(kw::MATCH, false)), _),
        "KW:try" => (_, T(token::Ident(kw::TRY, false)), _),
        "KW:ref" => (_, T(token::Ident(kw::REF, false)), _),
        "KW:then" => (_, T(token::Ident(kw::THEN, false)), _),
        "KW:do" => (_, T(token::Ident(kw::DO, false)), _),
        "KW:with" => (_, T(token::Ident(kw::WITH, false)), _),
        "KW:leaf" => (_, T(token::Ident(kw::LEAF, false)), _),
        "KW:super" => (_, T(token::Ident(kw::SUPER, false)), _),
        "KW:mod" => (_, T(token::Ident(kw::MOD, false)), _),

        "literal" => (_, T(token::Literal(<token::Lit>)), _),
        "ident" => (_, T(token::Ident(<Symbol>, _)), _),
        "lifetime" => (_, T(token::Lifetime(<Symbol>)), _),
        "inner attr" => (_, InnerAttr(<PResult<'diag, Attribute>>), _),
        "outer attr" => (_, OuterAttr(<PResult<'diag, Attribute>>), _),
        "inner doc" => (
            _,
            T(token::DocComment(<token::CommentKind>, AttrStyle::Inner, <Symbol>)),
            _,
        ),
        "outer doc" => (
            _,
            T(token::DocComment(<token::CommentKind>, AttrStyle::Outer, <Symbol>)),
            _,
        ),
    }
}

// ------------------------------------------
// Units

#[inline]
Visibility: VisibilityKind = {
    "KW:pub" "(" "KW:in" <e:ExprPath> ")" => VisibilityKind::Restricted {
        path: e,
        id: DUMMY_ID,
    },
    "KW:pub" => VisibilityKind::Public,
}

OuterAttr: Attribute = {
    <"outer attr"> =>? Ok(<>?),
    <lo:@L> <doc:"outer doc"> <hi:@R> => Attribute {
        id: DUMMY_ID,
        style: AttrStyle::Outer,
        kind: AttrKind::Comment(doc.0, doc.1),
        span: Span::new(lo, hi),
    }
}

InnerAttr: () = {
    <"inner attr"> =>? Ok(cx.push_attr(<>?)),
    <lo:@L> <doc:"inner doc"> <hi:@R> => cx.push_attr(Attribute {
        id: DUMMY_ID,
        style: AttrStyle::Inner,
        kind: AttrKind::Comment(doc.0, doc.1),
        span: Span::new(lo, hi),
    }),
}

#[inline]
RangeTo<T>: (RangeLimits, T, Span) = {
    <lo:@L> "..`" <rhs:T> <hi:@R> => {
        (RangeLimits::HalfOpen, rhs, Span::new(lo, hi))
    },
    <lo:@L> "..=" <rhs:T> <hi:@R> => {
        (RangeLimits::Closed, rhs, Span::new(lo, hi))
    },
}

#[inline]
Attrs: Vec<Attribute> = OuterAttr*;

#[inline]
AssignOp: BinOp = {
    <lo:@L> "+=" <hi:@R> => BinOp::new(BinOpKind::Add, Span::new(lo, hi)),
    <lo:@L> "-=" <hi:@R> => BinOp::new(BinOpKind::Sub, Span::new(lo, hi)),
    <lo:@L> "*=" <hi:@R> => BinOp::new(BinOpKind::Mul, Span::new(lo, hi)),
    <lo:@L> "/=" <hi:@R> => BinOp::new(BinOpKind::Div, Span::new(lo, hi)),
    <lo:@L> "%=" <hi:@R> => BinOp::new(BinOpKind::Rem, Span::new(lo, hi)),
    <lo:@L> "^=" <hi:@R> => BinOp::new(BinOpKind::BitXor, Span::new(lo, hi)),
    <lo:@L> "&=" <hi:@R> => BinOp::new(BinOpKind::BitAnd, Span::new(lo, hi)),
    <lo:@L> "|=" <hi:@R> => BinOp::new(BinOpKind::BitOr, Span::new(lo, hi)),
    <lo:@L> "<<=" <hi:@R> => BinOp::new(BinOpKind::Shl, Span::new(lo, hi)),
    <lo:@L> ">>=" <hi:@R> => BinOp::new(BinOpKind::Shr, Span::new(lo, hi)),
}

#[inline]
Operator: Operator = {
    AssignOp => Operator::AssignBinary(<>),

    <lo:@L> "=" <hi:@R> => Operator::from_assign(Span::new(lo, hi)),
    <lo:@L> "<" <hi:@R> => Operator::from_bin(BinOpKind::Lt, Span::new(lo, hi)),
    <lo:@L> "<=" <hi:@R> => Operator::from_bin(BinOpKind::Le, Span::new(lo, hi)),
    <lo:@L> "==" <hi:@R> => Operator::from_bin(BinOpKind::Eq, Span::new(lo, hi)),
    <lo:@L> "!=" <hi:@R> => Operator::from_bin(BinOpKind::Ne, Span::new(lo, hi)),
    <lo:@L> ">=" <hi:@R> => Operator::from_bin(BinOpKind::Ge, Span::new(lo, hi)),
    <lo:@L> ">" <hi:@R> => Operator::from_bin(BinOpKind::Gt, Span::new(lo, hi)),
    <lo:@L> "&&" <hi:@R> => Operator::from_bin(BinOpKind::And, Span::new(lo, hi)),
    <lo:@L> "||" <hi:@R> => Operator::from_bin(BinOpKind::Or, Span::new(lo, hi)),

    <lo:@L> "!" <hi:@R> => Operator::from_un(UnOpKind::Not, Span::new(lo, hi)),
    <lo:@L> "`" "-" <hi:@R> => Operator::from_un(UnOpKind::Neg, Span::new(lo, hi)),
    <lo:@L> "`" "*" <hi:@R> => Operator::from_un(UnOpKind::Deref, Span::new(lo, hi)),

    <lo:@L> "+" <hi:@R> => Operator::from_bin(BinOpKind::Add, Span::new(lo, hi)),
    <lo:@L> "-" <hi:@R> => Operator::from_bin(BinOpKind::Sub, Span::new(lo, hi)),
    <lo:@L> "*" <hi:@R> => Operator::from_bin(BinOpKind::Mul, Span::new(lo, hi)),
    <lo:@L> "/" <hi:@R> => Operator::from_bin(BinOpKind::Div, Span::new(lo, hi)),
    <lo:@L> "%" <hi:@R> => Operator::from_bin(BinOpKind::Rem, Span::new(lo, hi)),
    <lo:@L> "^" <hi:@R> => Operator::from_bin(BinOpKind::BitXor, Span::new(lo, hi)),
    <lo:@L> "&" <hi:@R> => Operator::from_bin(BinOpKind::BitAnd, Span::new(lo, hi)),
    <lo:@L> "|" <hi:@R> => Operator::from_bin(BinOpKind::BitOr, Span::new(lo, hi)),
    <lo:@L> "<<" <hi:@R> => Operator::from_bin(BinOpKind::Shl, Span::new(lo, hi)),
    <lo:@L> ">>" <hi:@R> => Operator::from_bin(BinOpKind::Shr, Span::new(lo, hi)),

    <lo:@L> Bracket "`" "]" <hi:@R> => Operator::Index(Span::new(lo, hi)),
}

#[inline]
Bracket: () = {
    "[" => (),
    "`[" => (),
}

#[inline]
Sep<T, Separator>: Vec<T> = {
    <mut v:(<T> Separator)*> <last:T?> => {
        v.extend(last);
        v
    },
}

#[inline]
SepTuple1<T, Separator>: Vec<T> = {
    <mut v:(<T> Separator)+> <last:T?> => {
        v.extend(last);
        v
    },
}

#[inline]
Sep1<T, Separator>: Vec<T> = {
    SepTuple1<T, Separator>,
    <T> => vec![<>],
}

#[inline]
Comma<T>: Vec<T> = Sep<T, ",">;

#[inline]
CommaTuple1<T>: Vec<T> = SepTuple1<T, ",">;

#[inline]
Comma1<T>: Vec<T> = Sep1<T, ",">;

#[inline]
Spanned<T>: Spanned<T> = {
    <lo:@L> <kind:T> <hi:@R> => Spanned { kind, span: Span::new(lo, hi) },
}

// ------------------------------------------
// Identifiers

Ident: Ident = {
    <sp:Spanned<"ident">> => Ident::new(sp.kind, sp.span),
}

Lifetime: Lifetime = {
    <sp:Spanned<"lifetime">> => Lifetime {
        id: DUMMY_ID,
        ident: Ident::new(sp.kind, sp.span),
    },
}

#[inline]
Mutability: Mutability = {
    "KW:const"? => Mutability::kw(kw::CONST),
    "KW:mut" => Mutability::kw(kw::MUT),
    "KW:move" => Mutability::kw(kw::MOVE),
    "#" <ident:Ident> => Mutability { id: DUMMY_ID, ident },
}

#[inline]
PathRoot: Ident = {
    <sp:Spanned<"KW:leaf">> => Ident::new(kw::LEAF, sp.span),
    <sp:Spanned<"KW:super">> => Ident::new(kw::SUPER, sp.span),
    <sp:Spanned<"KW:mod">> => Ident::new(kw::MOD, sp.span),
}

// ------------------------------------------
// Expressions

Where: Vec<P<Expr>> = {
    "KW:where" <Comma1<Expr>> => <>,
}

Prerequisites: Prerequisites = {
    <lo:@L> "KW:forall" <forall:Comma<Ident>> <w:Where?> "=>" <hi:@R> => {
        Prerequisites {
            id: DUMMY_ID,
            forall,
            where_clause: w.unwrap_or_default(),
            span: Span::new(lo, hi),
        }
    },
}

UnOpKind: UnOpKind = {
    "*" => UnOpKind::Deref,
    "!" => UnOpKind::Not,
    "-" => UnOpKind::Neg,
}

UnOp: UnOp = Spanned<UnOpKind>;

#[inline]
ExprOf<T>: P<Expr> = {
    <sp:Spanned<T>> => P(Expr {
        id: DUMMY_ID,
        kind: sp.kind,
        span: sp.span,
        attrs: cx.take_attr(vec![]),
    }),
}

ExprTuple: ExprKind = {
    "(" ")" => ExprKind::Tuple(vec![]),
    "(" <fields:CommaTuple1<Expr>> ")" => ExprKind::Tuple(fields),
}

ExprArray: ExprKind = {
    "[" <fields:Comma<Expr>> "]" => ExprKind::Array(fields),
    "[" <e:Expr> ";" <count:Expr> "]" => ExprKind::ArrayRepeated(e, count),
}

StructFieldKind: StructFieldKind = {
    <pat:PatAtomic> ":" <expr:Expr> => StructFieldKind::Simple { pat, expr },
    ".." <expr:Expr> => StructFieldKind::Reuse(expr),
    "..`" <expr:Expr> => StructFieldKind::Reuse(expr),
    <ident:Ident> => StructFieldKind::Ident(ident),
}

StructField: StructField = {
    <lo:@L>
        <prereq:(Prerequisites? @R)>
        <attrs:Attrs>
        <vis:Spanned<Visibility?>>
        <kind:StructFieldKind>
    <hi:@R> => StructField {
        id: DUMMY_ID,
        prerequisites: prereq.0.unwrap_or_else(|| {
            Prerequisites::from_span(Span::new(lo, prereq.1))
        }),
        attrs: cx.take_attr(attrs),
        visibility: vis.map(|v| v.unwrap_or_default()),
        kind,
        span: Span::new(lo, hi),
    },
}

ExprStruct: ExprKind = {
    "`" "{" <fields:Comma<StructField>> "}" => ExprKind::Struct(fields),
}

EnumField: EnumField = {
    <prereq:(@L Prerequisites? @R)>
    <attrs:Attrs>
    <pat:PatOp> <ty:(":" <Expr>)?> => EnumField {
        prerequisites: prereq.1.unwrap_or_else(|| {
            Prerequisites::from_span(Span::new(prereq.0, prereq.2))
        }),
        attrs: cx.take_attr(attrs),
        id: DUMMY_ID,
        pat,
        ty,
    },
}

ExprEnum: ExprKind = {
    "`" Bracket <fields:Comma<EnumField>> "]" => ExprKind::Enum(fields),
}

ExprUnloadedBlock: ExprKind = {
    "`" => ExprKind::Block(P(Block::unloaded())),
}

ExprBlock: ExprKind = {
    "{" <leaf:Leaf> "}" => ExprKind::Block(P({
        let (block, attr) = leaf.load_block(Block::unloaded());
        cx.extend_attr(attr);
        block
    })),
}

ExprAtomic: ExprKind = {
    ExprBlock,
    "(" <op:Operator> ")" => ExprKind::Operator(op),
    "(" <e:Expr> ")" => ExprKind::Paren(e),
    "_" => ExprKind::Underscore,
    ".." => ExprKind::Range(None, RangeLimits::HalfOpen, None),
    <ident:Ident> => ExprKind::Ident(ident),
    <root:PathRoot> => ExprKind::Ident(root),
    <lit:"literal"> => ExprKind::Literal(lit),

    ExprTuple,
    ExprStruct,
    ExprEnum,
}

#[inline]
ExprPathKind: ExprKind = {
    ExprAtomic,
    <segments:(<ExprOf<ExprAtomic>> "::")+> <last:ExprOf<ExprAtomic>> =>
        ExprKind::Path(segments.into_iter().chain([last]).collect()),
}

pub ExprPath: P<Expr> = ExprOf<ExprPathKind>;

ExprDelimited: ExprKind = {
    ExprPathKind,
    ExprArray,

    <e:ExprOf<ExprDelimited>> "`[" <index:Expr> "]" => ExprKind::Index(e, index),
}

ExprFunc: ExprKind = {
    #[precedence(level = "0")]
    ExprDelimited,

    #[precedence(level = "1")] #[assoc(side = "left")]
    <e:ExprOf<ExprDelimited>> <op:Spanned<".">> <func:ExprPath> =>
        ExprKind::InfixCall(e, op.span, func),

    #[precedence(level = "2")] #[assoc(side = "left")]
    <func:ExprOf<ExprDelimited>>
        <implicit_args:("?" <ExprOf<ExprDelimited>>)*>
        <args:ExprOf<ExprDelimited>+> =>
        ExprKind::Call(func, implicit_args, args),
}

ExprUnary: ExprKind = {
    ExprFunc,

    <un:UnOp> <e:ExprOf<ExprUnary>> => ExprKind::Unary(un, e),
    "&" <l:Lifetime?> <m:Mutability> <e:ExprOf<ExprUnary>> => ExprKind::AddrOf(l, m, e),
}

ExprBinary: ExprKind = {
    #[precedence(level = "0")]
    ExprUnary,

    #[precedence(level = "1")] #[assoc(side="left")]
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"*">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::Mul), rhs),
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"/">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::Div), rhs),
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"%">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::Rem), rhs),

    #[precedence(level = "2")] #[assoc(side="left")]
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"+">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::Add), rhs),
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"-">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::Sub), rhs),

    #[precedence(level = "3")] #[assoc(side="left")]
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"<<">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::Shl), rhs),
    <lhs:ExprOf<ExprBinary>> <op:(@L ">>" @R)> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, BinOp { kind: BinOpKind::Shr, span: Span::new(op.0, op.2) }, rhs),

    #[precedence(level = "4")] #[assoc(side="left")]
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"^">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::BitXor), rhs),
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"&">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::BitAnd), rhs),
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"|">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::BitOr), rhs),

    #[precedence(level = "5")] #[assoc(side="left")]
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"==">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::Eq), rhs),
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"!=">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::Ne), rhs),
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"<">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::Lt), rhs),
    <lhs:ExprOf<ExprBinary>> <op:(@L ">" @R)> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, BinOp { kind: BinOpKind::Gt, span: Span::new(op.0, op.2) }, rhs),
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"<=">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::Le), rhs),
    <lhs:ExprOf<ExprBinary>> <op:(@L ">=" @R)> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, BinOp { kind: BinOpKind::Ge, span: Span::new(op.0, op.2) }, rhs),

    #[precedence(level = "6")] #[assoc(side="left")]
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"&&">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::And), rhs),

    #[precedence(level = "7")] #[assoc(side="left")]
    <lhs:ExprOf<ExprBinary>> <op:Spanned<"||">> <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Binary(lhs, op.map(|_| BinOpKind::Or), rhs),

    #[precedence(level = "8")] #[assoc(side = "left")]
    <lhs:ExprOf<ExprBinary>> "`..=" <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Range(Some(lhs), RangeLimits::Closed, Some(rhs)),
    <lhs:ExprOf<ExprBinary>> "`..`" <rhs:ExprOf<ExprBinary>> =>
        ExprKind::Range(Some(lhs), RangeLimits::HalfOpen, Some(rhs)),
    <lhs:ExprOf<ExprBinary>> "`.." =>
        ExprKind::Range(Some(lhs), RangeLimits::HalfOpen, None),

    #[precedence(level = "9")]
    <r:RangeTo<ExprOf<ExprBinary>>> => ExprKind::Range(None, r.0, Some(r.1)),
}

MatchArm: MatchArm = {
    <lo:@L> <prereq:Prerequisites?> <hi:@R>
    <attrs:Attrs>
    "\\" <pat:Pat> "->" <expr:Expr> => MatchArm {
        prerequisites: prereq.unwrap_or_else(|| {
            Prerequisites::from_span(Span::new(lo, hi))
        }),
        attrs: cx.take_attr(attrs),
        pat,
        expr,
    }
}

#[inline]
LetExpr: P<Expr> = {
    Expr,
    ExprOf<ExprUnloadedBlock>,
}

ExprUnannotated: ExprKind = {
    #[precedence(level = "0")]
    ExprBinary,

    #[precedence(level = "1")] #[assoc(side = "right")]

    <lhs:ExprOf<ExprUnary>> <op:Spanned<"=">> <rhs:Expr> =>
        ExprKind::Assign(lhs, op.span, rhs),

    <lhs:ExprOf<ExprUnary>> <op:AssignOp> <rhs:Expr> =>
        ExprKind::AssignOp(lhs, op, rhs),

    "\\" <arg:PatOp> <ty:(":" <Expr>)?> "->" <body:Expr> =>
        ExprKind::Lambda(arg, ty, body),

    <lhs:ExprOf<ExprUnary>> ":" <rhs:Expr> => ExprKind::BelongsTo(lhs, rhs),

    #[precedence(level = "2")]

    "KW:let" <pat:PatOp> <ty:(":" <Expr>)?> ":=" <expr:LetExpr> =>
        ExprKind::Let(Let { pat, ty, expr }),

    "KW:if" <pred:Expr>
        "KW:then" <e:ExprOf<ExprUnannotated>>
        "KW:else" <other:ExprOf<ExprUnannotated>> =>
        ExprKind::If(pred, e, Some(other)),

    "KW:while" <pred:Expr> "KW:do" <body:ExprOf<ExprUnannotated>> =>
        ExprKind::While(pred, body),

    "KW:loop" <body:ExprOf<ExprUnannotated>> => ExprKind::Loop(body),

    "KW:for" <pat:Pat> "KW:in" <e:Expr> "KW:do" <body:ExprOf<ExprUnannotated>> =>
        ExprKind::ForLoop(pat, e, body),

    "KW:match" <pred:Expr> "KW:with" "{" <arms:Comma<MatchArm>> "}" =>
        ExprKind::Match(pred, arms),

    "KW:exists" <e:ExprOf<ExprUnannotated>> => ExprKind::Exists(e),

    "KW:break" <l:Lifetime?> <e:ExprOf<ExprUnannotated>?> => ExprKind::Break(l, e),

    "KW:continue" <l:Lifetime?> => ExprKind::Continue(l),

    "KW:return" <e:ExprOf<ExprUnannotated>?> => ExprKind::Return(e),
}

ExprKind: ExprKind = {
    ExprUnannotated,

    <l:Lifetime> ":" <e:Expr> => ExprKind::Annotated(l, e),

    <prereq:Prerequisites> <e:Expr> => ExprKind::Prereq(prereq, e),

    <vis:Spanned<Visibility>> <e:ExprOf<ExprUnannotated>> => ExprKind::Vis(vis, e),
}

pub Expr: P<Expr> = {
    ExprOf<ExprKind>,

    <attr:OuterAttr> <e:Expr> => e.map(|mut e| {
        e.attrs.push(attr);
        e
    }),
}

// ------------------------------------------
// Patterns

#[inline]
BindingMode: BindingMode = {
    "KW:ref"? => match <> {
        Some(_) => BindingMode::ByRef,
        None => BindingMode::ByValue,
    }
}

PatTuple: P<Pat> = {
    <lo:@L> "(" ")" <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Tuple(vec![]),
        span: Span::new(lo, hi),
    }),
    <lo:@L> "(" <fields:CommaTuple1<PatOp>> ")" <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Tuple(fields),
        span: Span::new(lo, hi),
    }),
}

PatArray: P<Pat> = {
    <lo:@L> Bracket <fields:Comma<PatOp>> "]" <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Array(fields),
        span: Span::new(lo, hi),
    }),
}

PatField: PatField = {
    <lo:@L>
        <mode:BindingMode> <m:Mutability> <ident:Ident>
    <hi:@R> => PatField {
        id: DUMMY_ID,
        ident,
        pat: P(Pat {
            id: DUMMY_ID,
            kind: PatKind::Ident(mode, m, ident, None),
            span: Span::new(lo, hi),
        }),
        span: Span::new(lo, hi),
        is_shorthand: false,
        is_placeholder: false,
    },

    <lo:@L> <ident:Ident> ":" <pat:PatOp> <hi:@R> => PatField {
        id: DUMMY_ID,
        ident,
        pat,
        span: Span::new(lo, hi),
        is_shorthand: true,
        is_placeholder: false,
    },
}

PatStruct: P<Pat> = {
    <lo:@L> "{" <fields:Comma<PatField>> "}" <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Struct(fields, false),
        span: Span::new(lo, hi),
    }),

    <lo:@L> "{" <fields:(<PatField> ",")*> ".." "}" <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Struct(fields, true),
        span: Span::new(lo, hi),
    }),

    <lo:@L> "{" "*" "}" <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::StructGlob,
        span: Span::new(lo, hi),
    }),
}

PatAtomic: P<Pat> = {
    #[precedence(level = "0")]

    <lo:@L> "(" <pat:Pat> ")" <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Paren(pat),
        span: Span::new(lo, hi),
    }),

    <lo:@L> "_" <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Wildcard,
        span: Span::new(lo, hi)
    }),

    <lo:@L> ".." <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Range(None, RangeLimits::HalfOpen, None),
        span: Span::new(lo, hi),
    }),

    <lo:@L> <lit:"literal"> <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Literal(lit),
        span: Span::new(lo, hi),
    }),

    PatArray,
    PatTuple,
    PatStruct,

    #[precedence(level = "1")] #[assoc(side = "left")]

    <lo:@L> "&" <l:Lifetime?> <m:Mutability> <i:PatAtomic> <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Deref(l, m, i),
        span: Span::new(lo, hi),
    }),

    #[precedence(level = "2")] #[assoc(side = "left")]

    <lo:@L>
        <i_lo:@L> <mode:BindingMode> <m:Mutability> <ident:Ident> <i_hi:@R>
        <alias:("@" <PatAtomic>)?>
    <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Ident(mode, m, ident, alias),
        span: Span::new(lo, hi)
    }),
}

PatPath: P<Pat> = {
    PatAtomic,

    <lo:@L> <segments:(<PatAtomic> "::")+> <last:PatAtomic> <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Path(segments.into_iter().chain([last]).collect()),
        span: Span::new(lo, hi),
    }),
    <lo:@L> <root:PathRoot> <segments:("::" <PatAtomic>)*> <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Path([P(Pat::from_ident(root))].into_iter().chain(segments).collect()),
        span: Span::new(lo, hi),
    }),
}

PatFunc: P<Pat> = {
    #[precedence(level = "0")]
    PatPath,

    #[precedence(level = "1")] #[assoc(side = "left")]
    <lo:@L>
        <func:PatPath>
        <implicit_args:("?" <PatPath>)*>
        <args:PatPath+>
    <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Call(func, implicit_args, args),
        span: Span::new(lo, hi),
    }),
}

PatOp: P<Pat> = {
    #[precedence(level = "0")]
    PatFunc,

    #[precedence(level = "1")] #[assoc(side = "left")]
    <lo:@L> <lhs:PatFunc> "`..=" <rhs:PatFunc> <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Range(Some(lhs), RangeLimits::Closed, Some(rhs)),
        span: Span::new(lo, hi),
    }),
    <lo:@L> <lhs:PatFunc> "`..`" <rhs:PatFunc> <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Range(Some(lhs), RangeLimits::HalfOpen, Some(rhs)),
        span: Span::new(lo, hi),
    }),
    <lo:@L> <lhs:PatFunc> "`.." <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Range(Some(lhs), RangeLimits::HalfOpen, None),
        span: Span::new(lo, hi),
    }),

    #[precedence(level = "2")]
    <r:RangeTo<PatFunc>> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Range(None, r.0, Some(r.1)),
        span: r.2,
    }),
}

Pat: P<Pat> = {
    PatOp,

    <lo:@L> <lhs:(<PatOp> "|")+> <rhs:PatOp> <hi:@R> => P(Pat {
        id: DUMMY_ID,
        kind: PatKind::Or(lhs.into_iter().chain([rhs]).collect()),
        span: Span::new(lo, hi),
    }),
}

// ------------------------------------------
// Statements

Stmt: P<Stmt> = {
    <lo:@L> <e:Expr> ";" <hi:@R> => P(Stmt {
        id: DUMMY_ID,
        kind: StmtKind::Expr(e),
        span: Span::new(lo, hi),
    }),

    <lo:@L> ";" <hi:@R> => P(Stmt {
        id: DUMMY_ID,
        kind: StmtKind::Empty,
        span: Span::new(lo, hi),
    }),
}

StmtSemi: P<Stmt> = {
    <e:Expr> => P(Stmt {
        id: DUMMY_ID,
        span: e.span,
        kind: StmtKind::Semi(e),
    }),
}

Stmts: Vec<P<Stmt>> = {
    <mut stmts:Stmt*> <fin:StmtSemi?> => {
        stmts.extend(fin);
        stmts
    },
}

// ------------------------------------------
// Leaf

pub Leaf: Leaf = {
    <lo:@L> InnerAttr* <stmts:Stmts> <hi:@R> => Leaf {
        id: DUMMY_ID,
        attrs: mem::take(&mut cx.inner_attrs),
        stmts,
        span: Span::new(lo, hi),
    },
}
