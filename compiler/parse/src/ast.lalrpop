use std::marker::PhantomData;

use dendro_ast::{ast::*, token::{self, TokenKind}, token_stream::*};
use dendro_span::{span::*, symbol::*, ident::*};

use crate::imp::*;

grammar<'diag, 'cx>(
    diag: &'diag DiagCx,
    cx: &'cx mut ParseCx,
);

extern {
    type Location = Pos;
    type Error = dendro_error::DiagnosticBuilder<'diag>;

    enum TokenKind {
        "(" => token::OpenDelim(token::Parenthesis),
        ")" => token::CloseDelim(token::Parenthesis),
        "[" => token::OpenDelim(token::Bracket),
        "]" => token::CloseDelim(token::Bracket),
        "{" => token::OpenDelim(token::Brace),
        "}" => token::CloseDelim(token::Brace),
        "open delim" => token::OpenDelim(<token::Delimiter>),
        "close delim" => token::CloseDelim(<token::Delimiter>),

        "=" => token::Eq,
        "<" => token::Lt,
        "<=" => token::Le,
        "==" => token::EqEq,
        "!=" => token::Ne,
        ">=" => token::Ge,
        ">" => token::Gt,
        "&&" => token::AndAnd,
        "||" => token::OrOr,
        "!" => token::Not,
        "~" => token::Tilde,
        "`" => token::BackQuote,
        "\\" => token::BackSlash,

        "+" => token::BinOp(token::Plus),
        "-" => token::BinOp(token::Minus),
        "*" => token::BinOp(token::Star),
        "/" => token::BinOp(token::Slash),
        "%" => token::BinOp(token::Percent),
        "^" => token::BinOp(token::Caret),
        "&" => token::BinOp(token::And),
        "|" => token::BinOp(token::Or),
        "<<" => token::BinOp(token::Shl),
        ">>" => token::BinOp(token::Shr),

        "+=" => token::BinOpEq(token::Plus),
        "-=" => token::BinOpEq(token::Minus),
        "*=" => token::BinOpEq(token::Star),
        "/=" => token::BinOpEq(token::Slash),
        "%=" => token::BinOpEq(token::Percent),
        "^=" => token::BinOpEq(token::Caret),
        "&=" => token::BinOpEq(token::And),
        "|=" => token::BinOpEq(token::Or),
        "<<=" => token::BinOpEq(token::Shl),
        ">>=" => token::BinOpEq(token::Shr),

        "@" => token::At,
        "." => token::Dot,
        ".." => token::DotDot,
        "..." => token::DotDotDot,
        "..=" => token::DotDotEq,
        "," => token::Comma,
        ";" => token::Semi,
        ":" => token::Colon,
        "::" => token::ColonColon,
        "->" => token::RArrow,
        "<-" => token::LArrow,
        "=>" => token::FatArrow,
        "#" => token::Pound,
        "$" => token::Dollar,
        "?" => token::Question,
        "'" => token::SingleQuote,

        "_" => token::Ident(kw::UNDERSCORE, false),
        "forall" => token::Ident(kw::FORALL, false),
        "exists" => token::Ident(kw::EXISTS, false),
        "where" => token::Ident(kw::WHERE, false),
        "let" => token::Ident(kw::LET, false),
        "pub" => token::Ident(kw::PUB, false),
        "static" => token::Ident(kw::STATIC, false),
        "unsafe" => token::Ident(kw::UNSAFE, false),
        "default" => token::Ident(kw::DEFAULT, false),
        "const" => token::Ident(kw::CONST, false),
        "mut" => token::Ident(kw::MUT, false),
        "move" => token::Ident(kw::MOVE, false),
        "return" => token::Ident(kw::RETURN, false),
        "in" => token::Ident(kw::IN, false),
        "if" => token::Ident(kw::IF, false),
        "else" => token::Ident(kw::ELSE, false),
        "loop" => token::Ident(kw::LOOP, false),
        "while" => token::Ident(kw::WHILE, false),
        "break" => token::Ident(kw::BREAK, false),
        "continue" => token::Ident(kw::CONTINUE, false),
        "for" => token::Ident(kw::FOR, false),
        "match" => token::Ident(kw::MATCH, false),
        "leaf" => token::Ident(kw::LEAF, false),
        "try" => token::Ident(kw::TRY, false),

        "literal" => token::Literal(<token::Lit>),
        "ident" => token::Ident(<Symbol>, <bool>),
        "lifetime" => token::Lifetime(<Symbol>),
        "inner doc" => token::DocComment(<token::CommentKind>, AttrStyle::Inner, <Symbol>),
        "outer doc" => token::DocComment(<token::CommentKind>, AttrStyle::Outer, <Symbol>),
    }
}

#[inline]
Visibility: VisibilityKind = {
    "pub" "(" "in" <e:ExprPath> ")" => VisibilityKind::Restricted {
        path: e,
        id: DUMMY_ID,
    },
    "pub" => VisibilityKind::Public,
}

AttrArgsOpt: AttrArgs = {
    <eq:(@L "=" @R)> <e:Expr> => AttrArgs::Eq(Span::new(eq.0, eq.2), e),
    // <delim:(@L "delim" @R)> => AttrArgs::Delimited(
    //     DelimSpan::from_pair(delim.0.into(), (delim.2 - Pos(1)).into()),
    //     delim.1 .0,
    //     delim.1 .1,
    // ),
}

AttrArgs: AttrArgs = {
    AttrArgsOpt? => <>.unwrap_or(AttrArgs::Empty),
}

OuterAttr: Attribute = {
    <lo:@L> "#" "[" <e:ExprPath> <args:AttrArgs> "]" <hi:@R> => {
        Attribute {
            id: DUMMY_ID,
            style: AttrStyle::Outer,
            kind: AttrKind::Normal(e, args),
            span: Span::new(lo, hi),
        }
    },
    <lo:@L> <doc:"outer doc"> <hi:@R> => Attribute {
        id: DUMMY_ID,
        style: AttrStyle::Outer,
        kind: AttrKind::Comment(doc.0, doc.1),
        span: Span::new(lo, hi),
    }
}

InnerAttr: () = {
    <lo:@L> "#" "!" "[" <e:ExprPath> <args:AttrArgs> "]" <hi:@R> => {
        cx.push_attr(Attribute {
            id: DUMMY_ID,
            style: AttrStyle::Inner,
            kind: AttrKind::Normal(e, args),
            span: Span::new(lo, hi),
        })
    },
    <lo:@L> <doc:"inner doc"> <hi:@R> => cx.push_attr(Attribute {
        id: DUMMY_ID,
        style: AttrStyle::Inner,
        kind: AttrKind::Comment(doc.0, doc.1),
        span: Span::new(lo, hi),
    }),
}

#[inline]
Attrs: Vec<Attribute> = OuterAttr*;

// ------------------------------------------
// Identifiers

Ident: Ident = {
    <lo:@L> <ident:"ident"> <hi:@R> =>? 
        ident::parse_ident(diag, Span::new(lo, hi), ident),
}

Lifetime: Lifetime = {
    <lo:@L> <lifetime:"lifetime"> <hi:@R> => Lifetime {
        id: DUMMY_ID,
        ident: Ident::new(lifetime, Span::new(lo, hi)),
    },
}

Mutability: Mutability = {
    "const"? => Mutability::kw(kw::CONST),
    "mut" => Mutability::kw(kw::MUT),
    "move" => Mutability::kw(kw::MOVE),
    "#" <ident:Ident> => Mutability { id: DUMMY_ID, ident },
}

// ------------------------------------------
// Expressions

Where: Vec<P<Expr>> = {
    "where" <first:Expr> <next:("," Expr)*> ","? => {
        [first].into_iter().chain(next.into_iter().map(|n| n.1)).collect()
    },
}

Prerequisites: Prerequisites = {
    <lo:@L>
        "forall" <first:Ident> <next:("," Ident)*>
        <w:Where?> "::"
    <hi:@R> => {
        Prerequisites {
            id: DUMMY_ID,
            forall: [first].into_iter().chain(next.into_iter().map(|n| n.1)).collect(),
            where_clause: w.unwrap_or_default(),
            span: Span::new(lo, hi),
        }
    },
}

UnOpKind: UnOpKind = {
    "*" => UnOpKind::Deref,
    "!" => UnOpKind::Not,
    "-" => UnOpKind::Neg,
}

UnOp: UnOp = {
    <un:(@L UnOpKind @R)> => UnOp {
        kind: un.1,
        span: Span::new(un.0, un.2),
    },
}

ExprTupleField: TupleField = {
    <lo:@L> <prereq:Prerequisites?> <hi:@R> <attrs:Attrs> <e:Expr> => TupleField {
        prerequisites: prereq.unwrap_or_else(|| {
            Prerequisites::from_span(Span::new(lo, hi))
        }),
        attrs: cx.take_attr(attrs),
        visibility: Visibility {
            kind: VisibilityKind::Inherited,
            span: DUMMY_SPAN
        },
        expr: e,
    },
    <lo:@L> <prereq:Prerequisites?> <hi:@R>
        <attrs:Attrs>
        <vis:(@L Visibility @R)>
    <e:ExprPath> => TupleField {
        prerequisites: prereq.unwrap_or_else(|| {
            Prerequisites::from_span(Span::new(lo, hi))
        }),
        attrs: cx.take_attr(attrs),
        visibility: parse_vis(vis),
        expr: e,
    },
}

ExprTuple: P<Expr> = {
    <lo:@L> "(" ")" <hi:@R> => P(Expr {
        id: DUMMY_ID,
        kind: ExprKind::Tuple(vec![]),
        span: Span::new(lo, hi),
        attrs: vec![],
    }),
    <lo:@L> "(" <e:ExprTupleField> "," ")" <hi:@R> => {
        P(Expr {
            id: DUMMY_ID,
            kind: ExprKind::Tuple(vec![e]),
            span: Span::new(lo, hi),
            attrs: vec![],
        })
    },
    <lo:@L> "("
        <first:ExprTupleField>
        <next:("," ExprTupleField)+>
        ","?
    ")" <hi:@R> => P(Expr {
        id: DUMMY_ID,
        kind: ExprKind::Tuple(
            [first]
                .into_iter()
                .chain(next.into_iter().map(|n| n.1))
                .collect()
        ),
        span: Span::new(lo, hi),
        attrs: vec![],
    }),
}

ExprArray: P<Expr> = {
    <lo:@L> "[" <first:Expr> <next:("," Expr)*> ","? "]" <hi:@R> => P(Expr {
        id: DUMMY_ID,
        kind: ExprKind::Array(
            [first]
                .into_iter()
                .chain(next.into_iter().map(|n| n.1))
                .collect()
        ),
        span: Span::new(lo, hi),
        attrs: vec![],
    }),
    <lo:@L> "[" <e:Expr> ";" <count:Expr> "]" <hi:@R> => P(Expr {
        id: DUMMY_ID,
        kind: ExprKind::ArrayRepeated(e, count),
        span: Span::new(lo, hi),
        attrs: vec![],
    }),
}

ExprAtomic: P<Expr> = {
    "(" <e:Expr> ")" => e,

    <ident:Ident> => P(Expr {
        id: DUMMY_ID,
        kind: ExprKind::Ident(ident),
        span: ident.span,
        attrs: vec![],
    }),

    <lit:(@L "literal" @R)> => P(Expr {
        id: DUMMY_ID,
        kind: ExprKind::Literal(lit.1),
        span: Span::new(lit.0, lit.2),
        attrs: vec![],
    }),
}

ExprPath: P<Expr> = {
    #[precedence(level = "0")]
    ExprAtomic,

    #[precedence(level = "1")] #[assoc(side = "left")]
    <e:ExprAtomic> <op:(@L "." @R)> <func:ExprAtomic> => {
        let span = Span::new(e.span.start, func.span.end);
        P(Expr {
            id: DUMMY_ID,
            kind: ExprKind::InfixCall(e, Span::new(op.0, op.2), func),
            span,
            attrs: vec![],
        })
    },
}

ExprDelimited: P<Expr> = {
    ExprPath,
    ExprTuple,
    ExprArray,
    // "(" <e:Expr> ")" => e,
}

ExprUnary: P<Expr> = {
    #[precedence(level = "0")]
    ExprDelimited,

    <lo:@L> <un:UnOp> <e:ExprDelimited> <hi:@R> => {
        P(Expr {
            id: DUMMY_ID,
            kind: ExprKind::Unary(un, e),
            span: Span::new(lo, hi),
            attrs: vec![],
        })
    },

    <lo:@L> "&" <l:Lifetime?> <m:Mutability> <e:ExprUnary> <hi:@R> => P(Expr {
        id: DUMMY_ID,
        kind: ExprKind::AddrOf(l, m, e),
        span: Span::new(lo, hi),
        attrs: vec![],
    }),

    #[precedence(level = "1")] #[assoc(side = "left")]
    <func:ExprUnary> <arg:ExprDelimited> => {
        let span = Span::new(func.span.start, arg.span.end);
        P(Expr {
            id: DUMMY_ID,
            kind: ExprKind::Call(func, arg),
            span,
            attrs: vec![],
        })
    },
}

ExprBinary: P<Expr> = {
    #[precedence(level = "0")]
    ExprUnary,

    #[precedence(level = "1")] #[assoc(side="left")]
    <lhs:(@L ExprBinary)> <op:(@L "*"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Mul, op.2), rhs),
    <lhs:(@L ExprBinary)> <op:(@L "/"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Div, op.2), rhs),
    <lhs:(@L ExprBinary)> <op:(@L "%"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Rem, op.2), rhs),

    #[precedence(level = "2")] #[assoc(side="left")]
    <lhs:(@L ExprBinary)> <op:(@L "+"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Add, op.2), rhs),
    <lhs:(@L ExprBinary)> <op:(@L "-"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Sub, op.2), rhs),

    #[precedence(level = "3")] #[assoc(side="left")]
    <lhs:(@L ExprBinary)> <op:(@L "<<"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Shl, op.2), rhs),
    <lhs:(@L ExprBinary)> <op:(@L ">>"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Shr, op.2), rhs),

    #[precedence(level = "4")] #[assoc(side="left")]
    <lhs:(@L ExprBinary)> <op:(@L "^"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::BitXor, op.2), rhs),
    <lhs:(@L ExprBinary)> <op:(@L "&"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::BitAnd, op.2), rhs),
    <lhs:(@L ExprBinary)> <op:(@L "|"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::BitOr, op.2), rhs),

    #[precedence(level = "5")] #[assoc(side="left")]
    <lhs:(@L ExprBinary)> <op:(@L "=="  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Eq, op.2), rhs),
    <lhs:(@L ExprBinary)> <op:(@L "!="  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Ne, op.2), rhs),
    <lhs:(@L ExprBinary)> <op:(@L "<"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Lt, op.2), rhs),
    <lhs:(@L ExprBinary)> <op:(@L ">"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Gt, op.2), rhs),
    <lhs:(@L ExprBinary)> <op:(@L "<="  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Le, op.2), rhs),
    <lhs:(@L ExprBinary)> <op:(@L ">="  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Ge, op.2), rhs),

    #[precedence(level = "6")] #[assoc(side="left")]
    <lhs:(@L ExprBinary)> <op:(@L "&&"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::And, op.2), rhs),

    #[precedence(level = "7")] #[assoc(side="left")]
    <lhs:(@L ExprBinary)> <op:(@L "||"  @R)> <rhs:(ExprBinary @R)> =>
        expr::parse_bin(lhs, (op.0, BinOpKind::Or, op.2), rhs),
}

pub Expr: P<Expr> = {
    ExprBinary,

    <lo:@L> "try" <e:ExprBinary> <hi:@R> => P(Expr {
        id: DUMMY_ID,
        kind: ExprKind::Try(e),
        span: Span::new(lo, hi),
        attrs: vec![],
    }),

    <lo:@L> "exists" <e:ExprBinary> <hi:@R> => P(Expr {
        id: DUMMY_ID,
        kind: ExprKind::Exists(e),
        span: Span::new(lo, hi),
        attrs: vec![],
    }),
}

__unused: PhantomData<&'diag ()> = {
    <Ident> => PhantomData,
}
